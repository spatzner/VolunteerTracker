@page "/individuals"

@using VolunteerTracker.Blazor.Services
@using VolunteerTracker.Blazor.Components.Shared;

@inject IndividualDataProvider IndividualDataProvider

<h3>Individuals</h3>
<VTButton Class="my-2" ButtonClass="btn btn-outline-primary" Tooltip="Add" @onclick="async () => await EditModal(null)"><i class="bi bi-plus-lg"></i></VTButton>
<Grid TItem="Individual"
      Class="table table-hover table-bordered table-striped"
      DataProvider="IndividualProvider"
      AllowFiltering="true"
      AllowPaging="true">
    <GridColumn TItem="Individual" HeaderText="Actions" Filterable="false" TextNoWrap="true">
        <VTButton Class="d-inline" ButtonClass="btn btn-outline-primary" Tooltip="View" @onclick="async () => await ViewModal(context.Id)"><i class="bi bi-binoculars"></i></VTButton>
        <VTButton Class="d-inline" ButtonClass="btn btn-outline-primary" Tooltip="Edit" @onclick="async () => await EditModal(context.Id)"><i class="bi bi-pencil"></i></VTButton>
    </GridColumn>
    <GridColumn TItem="Individual" PropertyName="@nameof(Individual.FullName)" HeaderText="FullName" FilterOperator="FilterOperator.StartsWith">
        @context.FullName
    </GridColumn>
    <GridColumn TItem="Individual" PropertyName="@nameof(Individual.Location)" HeaderText="Location" FilterOperator="FilterOperator.StartsWith">
        @context.Location
    </GridColumn>
    <GridColumn TItem="Individual" PropertyName="@nameof(Individual.Phone)" HeaderText="Phone" FilterOperator="FilterOperator.StartsWith">
        @context.Phone
    </GridColumn>
    <GridColumn TItem="Individual" PropertyName="@nameof(Individual.Email)" HeaderText="Email" FilterOperator="FilterOperator.StartsWith">
        @context.Email
    </GridColumn>
</Grid>

<Modal @ref="_editModal" Size="ModalSize.ExtraLarge">
</Modal>

@code {

    [Inject]
    protected PreloadService PreloadService { get; set; } = default!;

    private Modal _editModal = default!;

    private async Task EditModal(Guid? id)
    {
        var onCloseCallback = new EventCallback(this, (Func<Task>)CloseModal);
        var parameters = new Dictionary<string, object> { { "PersonGuid", id }, { "OnClose", onCloseCallback } };
        await _editModal.ShowAsync<IndividualEdit>(title: "Individual Details", parameters: parameters);
    }

    private async Task ViewModal(Guid id)
    {
        var onCloseCallback = new EventCallback(this, (Func<Task>)CloseModal);
        var parameters = new Dictionary<string, object> { { "PersonGuid", id }, { "OnClose", onCloseCallback } };
        await _editModal.ShowAsync<IndividualView>(title: "Individual Details", parameters: parameters);
    }

    private async Task CloseModal()
    {
        await _editModal.HideAsync();
    }

    private async Task<GridDataProviderResult<Individual>> IndividualProvider(GridDataProviderRequest<Individual> request)
    {
        var data = await IndividualDataProvider.Provide(request);
        return data;
    }

}