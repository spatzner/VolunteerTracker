@using VolunteerTracker.Repository.Entities
@using VolunteerTracker.Common.DataAnnotations
@using System.Collections.ObjectModel
@using VolunteerTracker.Blazor.Components.Shared.Element

<VTBorder Label="Phone">
    @foreach (Phone phone in List)
    {
        <div class="row pe-sm-4 pe-md-4 pe-lg-4 pe-xl-2">
            <VTDropdown Label="Type"
                        ContainerClass="col-3 pe-1"
                        Options="_phoneTypes"
                        Value="@phone.Type"
                        ValueChanged="@((string value) => TypeChanged(phone, value))">
            </VTDropdown>
            <VTTextBox Label="Number"
                       InputType="VTTextBox.Type.Tel"
                       ContainerClass="col-6 ps-1 pe-1"
                       Value="@phone.Number"
                       ValueChanged="@((string value) => NumberChanged(phone, value))">
            </VTTextBox>
            <VTRadio Label="Main"
                     Group="phonePrimary"
                     ContainerClass="col-2 ps-1"
                     Value="@phone.IsPrimary"
                     OnSelected="() => MainSelected(phone)">
            </VTRadio>
            <VTButtonDeleteSimple ContainerClass="col-1 ps-1 d-flex align-items-center" OnClick="() => DeletePhone(phone.Id)"></VTButtonDeleteSimple>
            <ValidationMessage For="@(() => @phone.Type)"/>
            <ValidationMessage For="@(() => @phone.Number)"/>
            <ValidationMessage For="@(() => @phone.IsPrimary)"/>
        </div>
    }
    <div class="row pe-sm-4 pe-md-4 pe-lg-4 pe-xl-2">
        <div class="col-11 mb-1 pe-1"></div>
        <VTButtonAddSimple ContainerClass="col-1 ps-1" OnClick="AddPhone"></VTButtonAddSimple>
    </div>
</VTBorder>

@code{

    [Parameter]
    public required ICollection<Phone> List { get; set; }

    [Parameter]
    public EventCallback<ICollection<Phone>> ListChanged { get; set; }

    [CascadingParameter]
    public EditContext EditContext { get; set; } = null!;

    private readonly List<string> _phoneTypes = typeof(Phone).GetAllowedValues(nameof(Phone.Type));

    private void DeletePhone(Guid phoneId)
    {
        List.Remove(List.First(x => x.Id == phoneId));
        if (List.All(p => !p.IsPrimary) && List.Count != 0)
            List.First().IsPrimary = true;
        ListChanged.InvokeAsync(List);
    }

    private void AddPhone(MouseEventArgs e)
    {
        List.Add(new Phone { Type = _phoneTypes.First(), IsPrimary = !List.Any() });
        ListChanged.InvokeAsync(List);
    }

    private void NumberChanged(Phone phone, string newValue)
    {
        if (phone.Number == newValue)
            return;

        phone.Number = newValue;

        NotifyContext(phone, nameof(phone.Number));

        ListChanged.InvokeAsync(List);
    }

    private void MainSelected(Phone phone)
    {
        phone.IsPrimary = true;

        foreach (Phone p in List.Where(p => p != phone))
        {
            p.IsPrimary = false;
        }

        NotifyContext(phone, nameof(phone.IsPrimary));
        ListChanged.InvokeAsync(List);
    }

    private void TypeChanged(Phone phone, string newValue)
    {
        if (phone.Type == newValue)
            return;

        phone.Type = newValue;
        NotifyContext(phone, nameof(phone.Type));
        ListChanged.InvokeAsync(List);
    }

    private void NotifyContext(Phone phone, string propertyName)
    {
        var index = List.ToList().IndexOf(phone);
        var fullPropertyName = $"{nameof(Person.Phones)}[{index}].{propertyName}";
        var fieldIdentifier = new FieldIdentifier(EditContext.Model, fullPropertyName);

        EditContext.NotifyFieldChanged(fieldIdentifier);
    }
}