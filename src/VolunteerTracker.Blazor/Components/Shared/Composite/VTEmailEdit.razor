@using VolunteerTracker.Repository.Entities
@using VolunteerTracker.Common.DataAnnotations
@using VolunteerTracker.Blazor.Components.Shared.Element


<VTBorder Label="Email">
    @foreach (Email email in List)
    {
        <div class="row">
            <VTDropdown Label="Type"
                        ContainerClass="col-3 pe-1"
                        Options="_emailTypes"
                        Value="@email.Type"
                        ValueChanged="@((string value) => TypeChanged(email, value))">
            </VTDropdown>
            <VTTextBox Label="Address"
                       ContainerClass="col-6 ps-1 pe-1"
                       Value="@email.Address"
                       ValueChanged="@((string value) => AddressChanged(email, value))">
            </VTTextBox>
            <VTRadio Label="Main"
                     Group="emailPrimary"
                     ContainerClass="col-2 ps-1"
                     Value="@email.IsPrimary"
                     OnSelected="() => MainSelected(email)">
            </VTRadio>
            <VTButtonDeleteSimple ContainerClass="col-1 ps-1 d-flex align-items-center" OnClick="() => DeleteEmail(email.Id)"></VTButtonDeleteSimple>
            <ValidationMessage For="@(() => @email.Type)" />
            <ValidationMessage For="@(() => @email.Address)" />
            <ValidationMessage For="@(() => @email.IsPrimary)" />
        </div>
    }
    <div class="row">
        <div class=" col-11 mb-1 pe-1"></div>
        <VTButtonAddSimple ContainerClass="col-1 ps-1" OnClick="AddEmail"></VTButtonAddSimple>
    </div>
</VTBorder>

@code {

    [Parameter]
    public required ICollection<Email> List { get; set; }

    [Parameter]
    public EventCallback<ICollection<Email>> ListChanged { get; set; }

    [CascadingParameter]
    public EditContext EditContext { get; set; } = null!;

    private readonly List<string> _emailTypes = typeof(Email).GetAllowedValues(nameof(Email.Type));

    private void DeleteEmail(Guid id)
    {
        List.Remove(List.First(x => x.Id == id));
        if (List.All(x => !x.IsPrimary))
            List.First().IsPrimary = true;
        ListChanged.InvokeAsync(List);
    }

    private void AddEmail(MouseEventArgs e)
    {
        List.Add(new Email { Type = _emailTypes.First(), IsPrimary = !List.Any() });
        ListChanged.InvokeAsync(List);
    }

    private void AddressChanged(Email email, string newValue)
    {
        if (email.Address == newValue)
            return;

        email.Address = newValue;
        Validate(email, nameof(email.Address));
        ListChanged.InvokeAsync(List);
    }

    private void MainSelected(Email email)
    {
        email.IsPrimary = true;

        foreach (Email e in List.Where(p => p != email))
        {
            e.IsPrimary = false;
        }

        Validate(email, nameof(email.IsPrimary));
        ListChanged.InvokeAsync(List);
    }

    private void TypeChanged(Email email, string newValue)
    {
        if (email.Type == newValue)
            return;

        email.Type = newValue;
        Validate(email, nameof(email.Type));
        ListChanged.InvokeAsync(List);
    }

    private void Validate(Email email, string propertyName)
    {
        var index = List.ToList().IndexOf(email);
        var fullPropertyName = $"{nameof(Person.Emails)}[{index}].{propertyName}";
        var fieldIdentifier = new FieldIdentifier(EditContext.Model, fullPropertyName);

        EditContext.NotifyFieldChanged(fieldIdentifier);
        EditContext.Validate();
    }

}