@using VolunteerTracker.Repository.Entities
@using VolunteerTracker.Common

@if (Individual == null)
{
    <div class="alert alert-danger">Individual not found</div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-lg-3">
                <fieldset>
                    <legend>Name</legend>
                    <div>@FormatFullName(Individual)</div>
                </fieldset>
            </div>
            <div class="col-lg-3">
                <fieldset>
                    <legend>Address</legend>
                    <div>@Individual.Address.Line1</div>
                    @if (!string.IsNullOrWhiteSpace(Individual.Address.Line2))
                    {
                        <div>@Individual.Address.Line2</div>
                    }
                    <div>@Individual.Address.City, @Individual.Address.State @Individual.Address.Zip</div>
                </fieldset>
            </div>
            <div class="col-lg-3">
                <fieldset>
                    <legend>Email</legend>
                    @foreach (var email in Individual.Emails.OrderByDescending(e => e.IsPrimary))
                    {
                        <div>@($"{email.Type}: {email.Address} {(email.IsPrimary ? "[Main]" : string.Empty)}")</div>
                    }
                </fieldset>
            </div>
            <div class="col-lg-3">
                <fieldset>
                    <legend>Phone</legend>
                    @foreach (var phone in Individual.Phones.OrderByDescending(e => e.IsPrimary))
                    {
                        <div>@($"{phone.Type}: {PhoneNumberFormatter.Format(phone.Number)} {(phone.IsPrimary ? "[Main]" : string.Empty)}")</div>
                    }
                </fieldset>
            </div>
        </div>
    </div>
}

@code {

    [Inject]
    public PhoneNumberFormatter PhoneNumberFormatter { get; set; } = null!;

    [Parameter]
    public required Individual Individual { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private string FormatFullName(Person person)
    {
        return string.Join(" ",
            new List<string?>
            {
                person.Title,
                person.FirstName,
                person.MiddleName,
                person.LastName,
                person.Suffix
            }.Where(x => !string.IsNullOrWhiteSpace(x)));
    }

}