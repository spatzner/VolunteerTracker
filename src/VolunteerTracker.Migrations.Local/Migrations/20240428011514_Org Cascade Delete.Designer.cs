// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VolunteerTracker.Repository;

#nullable disable

namespace VolunteerTracker.Migrations.Local.Migrations
{
    [DbContext(typeof(VolunteerContext))]
    [Migration("20240428011514_Org Cascade Delete")]
    partial class OrgCascadeDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VolunteerTracker.Repository.Dbo.ListType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ListTypes", "dbo");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Dbo.ListValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ListTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ListTypeId");

                    b.ToTable("ListValues", "dbo");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Donations.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DonorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Campaigns", "Donations");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Donations.Donation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("DonorId");

                    b.ToTable("Donations", "Donations");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Donations.DonationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.ToTable("DonationSchedules", "Donations");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Donations.Donor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("Donors", "Donations");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("IndividualId")
                        .HasColumnType("uuid");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Line2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId")
                        .IsUnique();

                    b.HasIndex("OrganizationId")
                        .IsUnique();

                    b.ToTable("Addresses", "Entities");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Emails", "Entities");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Organizations", "Entities");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Persons", "Entities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("Phones", "Entities");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Programs.NonProfitProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("Programs", "Program");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Individual", b =>
                {
                    b.HasBaseType("VolunteerTracker.Repository.Entities.Person");

                    b.ToTable("Persons", "Entities");

                    b.HasDiscriminator().HasValue("Individual");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Dbo.ListValue", b =>
                {
                    b.HasOne("VolunteerTracker.Repository.Dbo.ListType", "Type")
                        .WithMany("ListValues")
                        .HasForeignKey("ListTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Donations.Campaign", b =>
                {
                    b.HasOne("VolunteerTracker.Repository.Donations.Donor", null)
                        .WithMany("Campaigns")
                        .HasForeignKey("DonorId");

                    b.HasOne("VolunteerTracker.Repository.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Donations.Donation", b =>
                {
                    b.HasOne("VolunteerTracker.Repository.Donations.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("VolunteerTracker.Repository.Donations.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Donations.DonationSchedule", b =>
                {
                    b.HasOne("VolunteerTracker.Repository.Donations.Donor", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Donations.Donor", b =>
                {
                    b.HasOne("VolunteerTracker.Repository.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("VolunteerTracker.Repository.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Address", b =>
                {
                    b.HasOne("VolunteerTracker.Repository.Entities.Individual", "Individual")
                        .WithOne("Address")
                        .HasForeignKey("VolunteerTracker.Repository.Entities.Address", "IndividualId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VolunteerTracker.Repository.Entities.Organization", "Organization")
                        .WithOne("Address")
                        .HasForeignKey("VolunteerTracker.Repository.Entities.Address", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Email", b =>
                {
                    b.HasOne("VolunteerTracker.Repository.Entities.Person", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Organization", b =>
                {
                    b.HasOne("VolunteerTracker.Repository.Entities.Person", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Phone", b =>
                {
                    b.HasOne("VolunteerTracker.Repository.Entities.Organization", "Organization")
                        .WithOne("MainPhone")
                        .HasForeignKey("VolunteerTracker.Repository.Entities.Phone", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VolunteerTracker.Repository.Entities.Person", "Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId");

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Dbo.ListType", b =>
                {
                    b.Navigation("ListValues");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Donations.Donor", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Donations");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Organization", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("MainPhone");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Person", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("VolunteerTracker.Repository.Entities.Individual", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
